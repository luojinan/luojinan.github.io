<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://luojinan.github.io/</id>
    <title>Gridea</title>
    <updated>2019-12-19T14:51:04.775Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://luojinan.github.io/"/>
    <link rel="self" href="https://luojinan.github.io//atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://luojinan.github.io//images/avatar.png</logo>
    <icon>https://luojinan.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[我的图床]]></title>
        <id>https://luojinan.github.io//post/wo-de-tu-chuang</id>
        <link href="https://luojinan.github.io//post/wo-de-tu-chuang">
        </link>
        <updated>2019-12-19T14:50:51.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://luojinan.github.io//post-images/1576767058201.jpg" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[小程序支付步骤]]></title>
        <id>https://luojinan.github.io//post/xiao-cheng-xu-zhi-fu-bu-zou</id>
        <link href="https://luojinan.github.io//post/xiao-cheng-xu-zhi-fu-bu-zou">
        </link>
        <updated>2019-11-21T01:09:24.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://pay.weixin.qq.com/wiki/doc/api/wxa/wxa_api.php?chapter=7_4&amp;index=3">小程序支付文档</a></p>
<p><a href="https://open.swiftpass.cn/openapi/doc?index_1=3&amp;index_2=1&amp;chapter_1=190&amp;chapter_2=953">威富通文档</a></p>
<p><a href="https://github.com/luojinan/utils/blob/master/patSteps/index.vue">github--支付组件逻辑部分</a></p>
<p><img src="https://luojinan.github.io//post-images/1574298585705.png" alt=""></p>
<p><img src="https://luojinan.github.io//post-images/1574298592249.png" alt=""></p>
<hr>
<p>由图可知，支付流程主要分为，<code>创建订单</code>，<code>支付步骤</code>，<code>支付完成对账</code></p>
<ul>
<li><strong>创建订单</strong>，由小程序openid、商品id，创建出订单号和支付用的参数（给微信支付api）</li>
<li><strong>支付步骤</strong>。由<code>前端小程序api</code>做好不同情况处理，点击取消点击<code>确定，异常</code>等</li>
<li><strong>支付完成对账</strong>，由订单号、商品名、支付信息<code>得已购信息</code></li>
</ul>
<p><img src="https://luojinan.github.io//post-images/1574298597465.png" alt=""></p>
<hr>
<h3 id="1-创建订单接口createpayorder">1、创建订单接口<code>createPayOrder</code></h3>
<ul>
<li>入参：
<ul>
<li>代金券id</li>
<li>用户id</li>
</ul>
</li>
<li>出参：
<ul>
<li>支付信息payinfo</li>
<li>订单id</li>
</ul>
</li>
</ul>
<hr>
<h3 id="2-微信发起支付wxrequestpayment">2、微信发起支付<code>wx.requestPayment</code></h3>
<ul>
<li>入参：
<ul>
<li>支付信息payInfo</li>
</ul>
</li>
<li>出参：
<ul>
<li>状态
👆注意，promisify之后，取消支付也是走的catch路线
支付成功，不像接口有个statusCode，而是<code>res.errMsg == 'requestPayment:ok'</code></li>
</ul>
</li>
</ul>
<p>👇微信api发起支付，有如下三种情况</p>
<ul>
<li>取消支付</li>
<li>支付失败</li>
<li>支付成功</li>
</ul>
<blockquote>
<p>取消支付：调用取消订单接口。因为订单已经创建，所以要做释放内存清除无效订单的操作，这个接口实际上相当于删除订单接口
支付失败：弹窗提示
支付成功：调用对账接口。获取到已购代金券id，用于跳转到该已购代金券详情页面等后续操作。</p>
</blockquote>
<hr>
<h3 id="3-取消订单接口cancelbuy">3、取消订单接口<code>cancelBuy</code></h3>
<ul>
<li>入参
<ul>
<li>订单id</li>
<li>代金券id</li>
<li>用户id</li>
</ul>
</li>
<li>出参
<ul>
<li>status</li>
</ul>
</li>
</ul>
<hr>
<h3 id="4-对账接口paystatusforpage">4、对账接口<code>payStatusForPage</code></h3>
<ul>
<li>入参
<ul>
<li>订单id</li>
<li>跳转页面（？？？）</li>
<li>支付信息</li>
<li>代金券名（？？？）</li>
</ul>
</li>
<li>出参
<ul>
<li>获得积分</li>
<li>已购代金卷id</li>
</ul>
</li>
</ul>
<hr>
<h3 id="注意点">注意点</h3>
<h4 id="1-decodeuricomponent">1、decodeURIComponent()</h4>
<p><img src="https://luojinan.github.io//post-images/1574298604909.png" alt="">
从上一个页面传递过来的对象值，经过json转为对象之前要
<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent">MDN--decodeURIComponent()</a>
示例
<img src="https://luojinan.github.io//post-images/1574298611697.png" alt="">
👆可知是用来解码中文.......</p>
<p>不要用这种方法做页面传值，应该存本地缓存传对象，获取到对象之后清除本地缓存</p>
<hr>
<h4 id="2-catch里的return">2、catch里的return👇</h4>
<p><img src="https://luojinan.github.io//post-images/1574298617306.png" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2019.11 | 本地缓存方法封装]]></title>
        <id>https://luojinan.github.io//post/201911-or-ben-di-huan-cun-fang-fa-feng-zhuang</id>
        <link href="https://luojinan.github.io//post/201911-or-ben-di-huan-cun-fang-fa-feng-zhuang">
        </link>
        <updated>2019-11-04T02:00:52.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>原生的本地缓存方法api调用，有一定限制和麻烦的地方</p>
</blockquote>
<p>为了达到效果
参考：<a href="https://github.com/wuchangming/web-storage-cache">web-storage-cache的github库</a></p>
<hr>
<p>[toc]</p>
<hr>
<h3 id="例子">例子🌰</h3>
<pre><code class="language-js">myStorage = new xxx()

myStorage.set('key','value',{exp:100})  // key value(字符串/对象) 超时时间设置(单位秒/日期字符串/date类型)
myStorage.get('key')  // 自动把字符串转为对象
myStorage.delete('key')
</code></pre>
<p><img src="https://luojinan.github.io//post-images/1572832904458.png" alt=""></p>
<hr>
<h3 id="set方法">set()方法</h3>
<h4 id="实现步骤">实现步骤：</h4>
<ul>
<li>key格式判断（字符串、数字转换）</li>
<li>时间参数，数字补成 <code>{ time: 数字 }</code></li>
<li>构建实际存入本地缓存的<code>对象</code>
<ul>
<li>当前时间戳</li>
<li>结束时间戳（三种情况生成）</li>
<li>实际值（对象转字符串）</li>
</ul>
</li>
<li>用<code>try catch</code>来存入<code>本地缓存localStorage</code></li>
</ul>
<h4 id="实现代码">实现代码：</h4>
<pre><code class="language-js">set(key, value,options) {
    // 判断key值，判断val值，判断时间值
    key = _checkKey(key)
    // 判断options入参，不是对象的话，转换为对象
    if (typeof options === 'number') {
      options = {
        time: options
      }
    }
    const obj = {
      val: _serialize(value),
      nowTimeNum: (new Date()).getTime(), // 当前时间戳
      endTimeNum: _getEndDateByOption(options.time).getTime()
    }
    try {
      this.storage.setItem(key, _serialize(obj))
    } catch (err) {
      console.log('存入本地缓存失败',err)
    }
    return _serialize(value)
  }
</code></pre>
<p>👆过期时间要转换为<code>具体时间戳</code>（传入过期时间有<strong>3种情况</strong>）</p>
<pre><code class="language-js">// timer三种情况：数字类型(秒为单位)，字符串类型（日期格式），date对象类型
function _getEndDateByOption(timer, now) {
  now = now || new Date()
  // time是数字(秒为单位)或者日期字符串的情况
  if (typeof timer === 'number') {
    timer = new Date(now.getTime() + timer * 1000)
  } else if (typeof timer === 'string') {
    timer = new Date(timer) // 字符串结束日期，可能设置错误，写了比当前时间早（要做处理吗？）
  }
 
  // time是Date对象的情况
  if (timer &amp;&amp; !_isDateObj(timer)) {
    throw new Error('`timer` parameter cannot be converted to a valid Date instance')
  }
  return timer
}
</code></pre>
<p>最终存入的<strong>数据格式</strong>
<img src="https://luojinan.github.io//post-images/1572832923177.png" alt=""></p>
<hr>
<h3 id="get方法">get()方法</h3>
<h4 id="实现步骤-2">实现步骤：</h4>
<ul>
<li>key格式判断（字符串、数字转换）</li>
<li>用<code>try catch</code>来取<code>本地缓存localStorage</code>
<ul>
<li>判断是<strong>普通本地缓存数据</strong>(这条数据里没有<code>同时存在过期时间实际值当前时间</code>)</li>
<li>有结束时间，判断<strong>是否过期</strong>：
<ul>
<li>过期：删除本条数据，并返回<code>null</code></li>
<li>未过期：返回数据中的实际值（<code>字符串转对象</code>）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="实现代码-2">实现代码：</h4>
<pre><code class="language-js">  get(key) {
    key = _checkKey(key)
    let obj = null
    try {
      obj = _deserialize(this.storage.getItem(key))
    } catch (err) {
      console.log('获取本地缓存失败',err)
      return null
    }
    // 判断本地缓存数据里是否有结束时间
    if (_checkObj(obj)) {
      if (!_isTimeOut(obj)) return _deserialize(obj.val)
      else {
        this.delete(key)
        return null
      }
    }
    // 获取普通本地缓存数据（没有设置过期时间）
    return obj
  },
</code></pre>
<p>👆判断本地缓存对象（存入时,一定被转为对象了）是否<strong>同时有结束时间等</strong></p>
<pre><code class="language-js">// 判断本地缓存数据里是否有结束时间（内含 c-当前时间戳 b-超时时间戳  v-内存值）
function _checkObj(item) {
  if (typeof item !== 'object') {
    return false;
  }
  if (item) {
    if ('nowTimeNum' in item &amp;&amp; 'endTimeNum' in item &amp;&amp; 'val' in item) {
      return true;
    }
  }
  return false;
}
</code></pre>
<hr>
<h3 id="其他">其他</h3>
<p><strong>封装成构造函数</strong>只是为了能用<code>this.storage</code>这个值（<code>localStorage对象</code>）</p>
<p>实际上<strong>不需要</strong>封装成构造函数，<code>this.storage</code>这个值没必要抽出来...
最终<strong>暴露</strong>出 <code>{ get(), set() }</code>这种形式用好像更方便</p>
<hr>
<p><strong>最终代码：</strong>
<a href="https://github.com/luojinan/utils/blob/master/myStorage/myStorage.js">github</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[防抖工具函数封装]]></title>
        <id>https://luojinan.github.io//post/fang-dou-gong-ju-han-shu-feng-zhuang</id>
        <link href="https://luojinan.github.io//post/fang-dou-gong-ju-han-shu-feng-zhuang">
        </link>
        <updated>2019-08-15T02:03:59.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>防抖函数<code>debounce</code>用于<strong>解决连续触发同一事件问题</strong>，限制延迟一定时间后触发事件</p>
</blockquote>
<h3 id="效果图">效果图</h3>
<ul>
<li><strong>没有防抖的输入框</strong>
<img src="https://luojinan.github.io//post-images/1565834657948.gif" alt=""></li>
<li><strong>加了防抖的输入框</strong>
<img src="https://luojinan.github.io//post-images/1565834660305.gif" alt=""></li>
</ul>
<hr>
<h3 id="使用方法">使用方法</h3>
<p>1、<strong>在import部分 引入并声明构造函数</strong></p>
<pre><code class="language-js">  import Debounce from '@/common/libs/debounce'
  let debounce = Debounce()
</code></pre>
<p>2、<strong>在要节流的方法处使用</strong>(传入回调函数外，还可传入回调函数需要的参数，见源码)</p>
<pre><code class="language-js"> changePhone (e) {
   debounce(() =&gt; {
     console.log(e.mp.detail, '输入的手机号')
     this.phone = e.mp.detail
   })
 }
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[短信倒计时]]></title>
        <id>https://luojinan.github.io//post/duan-xin-dao-ji-shi</id>
        <link href="https://luojinan.github.io//post/duan-xin-dao-ji-shi">
        </link>
        <updated>2019-08-14T12:27:06.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>调用发送短信接口后，<strong>开启倒计时</strong>、并<strong>使按钮不可点击</strong></p>
</blockquote>
<h3 id="效果图">效果图</h3>
<p><img src="https://luojinan.github.io//post-images/1565785631215.gif" alt=""></p>
<hr>
<h3 id="实现步骤">实现步骤</h3>
<ul>
<li><strong>点击按钮</strong>，调用短信接口成功后把 <code>canClick = false</code></li>
<li>vue项目使用<code>watch</code>监听<code>canClick</code>标志符
<ul>
<li><code>canClick</code>变化为<code>true</code>或<code>false</code>都会<strong>触发监听</strong></li>
<li>而<strong>倒计时</strong>只会在<code>canClick</code>由<code>true</code>变为<code>false</code>（点击发送）时触发</li>
</ul>
</li>
<li><strong>倒计时结束</strong>清除定时器，并把 <code>canClick = true</code></li>
</ul>
<hr>
<h3 id="部分示例代码">部分示例代码</h3>
<pre><code class="language-js">watch: {
    canClick (e) {
        // 监听canclick变为false时执行倒计时
        if ( !e ) {
            clearInterval( this.timer )   // 确保上一次的定时器被清除(可能有延迟)
            this.timer = setInterval( ( )  =&gt; {
                this.second--
                // 当秒数减为0时，重置秒数和按钮可点击状态
                if (!this.second) {
                    this.second = 60
                    this.canClick = true
                    clearInterval(this.timer)
                    this.disabled = false
                }
            }, 1000)    //每隔1000毫秒减1 second
        }
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[节流工具函数封装]]></title>
        <id>https://luojinan.github.io//post/jie-liu-gong-ju-han-shu-feng-zhuang</id>
        <link href="https://luojinan.github.io//post/jie-liu-gong-ju-han-shu-feng-zhuang">
        </link>
        <updated>2019-08-14T11:40:11.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>节流函数<code>throttle</code>用于<strong>解决频繁操作问题</strong>，限制一定时间内点击不触发事件</p>
</blockquote>
<hr>
<p>[toc]</p>
<hr>
<h3 id="一-不同的实现方法">一、不同的实现方法</h3>
<h4 id="1-定时器">1、定时器</h4>
<ul>
<li><strong>缺点</strong></li>
</ul>
<blockquote>
<p><strong>首次也会被延迟</strong>，不会立即执行</p>
</blockquote>
<pre><code class="language-js">// 使用setTimeout实现
function throttle (fn, delay) {
  let flag = false
  if (!flag) {
    return function() {
      let context = this, args = arguments
      flag = setTimeout(() =&gt; {
        fn.apply(context, args)
        flag = true
      }, delay)
    }
  }
}
</code></pre>
<h4 id="2-时间戳">2、时间戳</h4>
<ul>
<li><strong>缺点</strong></li>
</ul>
<blockquote>
<p>在不可操作时间段中，点击无效，<strong>时间段结束不自动执行</strong>，要再点击一次
有时需求，频繁操作后，<strong>要记住最后一次点击，并定时结束自动执行</strong></p>
</blockquote>
<pre><code class="language-js">//  比较两次时间戳的间隔 是否大于等于 指定的时间 来决定是否执行事件回调
function throttle (fn, delay) {
  let start = 0
  return function () {
    if (now - start &gt;= delay) {
        let context = this, args = arguments, now = new Date()
        fn.apply(context, args);
        start = now
    }
  }
}
</code></pre>
<h3 id="二-最优方法">二、最优方法</h3>
<ul>
<li><strong>结合使用</strong></li>
</ul>
<blockquote>
<p>首次执行使用<strong>时间戳方法</strong>（非频繁操作）
1、后续继续使用<strong>时间戳方法</strong>(频繁操作且不需要自动执行最后一次)
2、后续执行包括记住最后一次点击都使用<strong>定时器方法</strong>（频繁操作且自动执行最后一次）</p>
</blockquote>
<hr>
<h3 id="三-开始封装工具函数">三、开始封装工具函数</h3>
<blockquote>
<p>这里以<code>vue</code>项目为例子封装</p>
</blockquote>
<h4 id="1-utils文件夹封装">1、utils文件夹封装</h4>
<blockquote>
<p>注意：这里利用了<code>闭包的方式（且不自执行）</code>
<code>function return function</code>来设置<code>局部变量</code>
关于<code>局部变量</code>看<strong>第四点</strong></p>
</blockquote>
<pre><code class="language-js">function Throttle (func, wait, trailing) {
    console.log('执行函数') // 这是闭包，函数只要引入页面就执行了
    let timer = null
    let start = 0
    return function () {
        let now = new Date()
        let remaining = wait - (now - start)
        console.log(remaining)
        // 拦截：延迟时间&gt;多次点击间隔时间，执行：多次点击间隔时间&gt;延迟时间
        if ((now - start) &gt;= wait) {
            // 由于setTimeout存在最小时间精度问题，因此会存在到达wait的时间间隔
            // 但之前设置的setTimeout操作还没被执行，因此为保险起见，这里先清理setTimeout操作
            timer &amp;&amp; clearTimeout(timer)
            timer = null
            start = now
            console.log('非频繁操作，点击间隔为：',remaining)
            return func()
        } else if (!timer &amp;&amp; trailing) {
            // trailing有值时，延时执行func函数
            // 频繁操作，第一次设置定时器之后，之后的不会再走到这里创建定时器
            // 清除问题，只能在第二有效点击的时候才会清除
            timer = setTimeout(() =&gt; {
                timer = null
                console.log('频繁操作，定时器延时执行')
                return func
            }, wait)
        }
    }
}
</code></pre>
<h4 id="2-页面内调用">2、页面内调用</h4>
<blockquote>
<p>1、引入工具函数<code>utils文件夹</code>
2、并执行<code>节流闭包函数</code>，外部（即：初始化局部变量），不会执行内部<code>return</code>的<code>function</code></p>
</blockquote>
<pre><code class="language-js">import {Throttle} from '@/common/libs/throttle'
let throttle = Throttle()
</code></pre>
<blockquote>
<p>3、在<code>methods</code>相应<strong>需要节流的方法</strong>里调用</p>
</blockquote>
<pre><code class="language-js">methods:{
    handleIcon (index) {
        // 执行节流闭包函数，内部 function ,已初始化时间，并以此计算点击间隔
        // 传入 回调函数fn，不可操作时长
        throttle(this.handleClick(index),3000)
    },
    handleClick(index){
        console.log( `点击了第${index}个按钮` )
    }
}
</code></pre>
<hr>
<h3 id="四-局部变量问题">四、局部变量问题</h3>
<blockquote>
<p>以此<strong>抽离封装函数</strong>，做到不需要在<code>vue</code>的<code>data</code>里设置<code>变量</code>
否则要在<code>data</code>里存入<code>点击时间戳</code>来做<strong>点击间隔判断</strong></p>
</blockquote>
<blockquote>
<p>局部变量概念，把变量设为私有变量，外部函数无法修改，<strong>只能被自己修改，或者内部函数修改</strong></p>
</blockquote>
<p><code>function return function</code> 方式，要分开执行<code>外部</code>和<code>内部方法</code></p>
<ul>
<li>一次用于<strong>初始化局部变量</strong></li>
<li>一次用于<strong>执行内部操作</strong>
<img src="https://luojinan.github.io//post-images/1565782932409.png" alt=""></li>
</ul>
<hr>
<h3 id="五-回调函数无法传参问题">五、回调函数无法传参问题</h3>
<blockquote>
<p>到这一步，在项目页面已经可以实现节流（既能第一次生效又能自动执行最后一次）
但是，发现传入回调函数是整个函数，不带<code>( )</code>，即：<strong>无法带参数</strong></p>
</blockquote>
<h4 id="1-尝试不传入整个函数而是传入func">1、尝试不传入整个函数,而是传入<code>func()</code></h4>
<ul>
<li><strong>当前情况</strong></li>
<li><strong>传入的只能是整个函数，而不发传入参数</strong>
<img src="https://luojinan.github.io//post-images/1565782935988.png" alt=""></li>
</ul>
<hr>
<ul>
<li><strong>修改为可以传入<code>function()</code></strong></li>
<li><strong>导致传入的不再是函数，而是一个值</strong>
<img src="https://luojinan.github.io//post-images/1565782951392.png" alt=""></li>
</ul>
<hr>
<h4 id="2-曲线救国给工具函数传参数而不是给回调函数传参数">2、曲线救国,给工具函数传参数,而不是给回调函数传参数</h4>
<ul>
<li><strong>节流工具函数</strong></li>
</ul>
<pre><code class="language-js">export function Throttle () {
    let start = 0
    // 传入节流时间，整个回调函数，传入回调函数的参数数组，是否自动执行标识
    return function (wait, func, params, trailing) {
        ...
        ...
        return  func(...params)
    }
}
</code></pre>
<ul>
<li><strong>页面调用，传入节流函数的参数</strong></li>
</ul>
<pre><code class="language-js">handleIcon ( index, commentId ) {
    throttle( 3000 , this.handleClick , [ index, commentId ] , 'trailing' )
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[emoji转码]]></title>
        <id>https://luojinan.github.io//post/emoji-zhuan-ma</id>
        <link href="https://luojinan.github.io//post/emoji-zhuan-ma">
        </link>
        <updated>2019-08-11T12:52:06.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>对于移动端，用户有可能输入<code>emoji</code>，并传入数据库，会导致<strong>无法识别而报错</strong></p>
</blockquote>
<blockquote>
<p>这里涉及2个工具方法：
1、<code>utf16的emoji表情字符</code> 转码 成<code>utf8的字符</code>
2、<code>八进制的字符</code> 转码 成<code>十六进制的emoji表情字符</code></p>
</blockquote>
<hr>
<p>[toc]</p>
<hr>
<h3 id="一-emoji转字符">一、emoji转字符</h3>
<pre><code class="language-js">//把utf16的emoji表情字符进行转码成八进制的字符
const utf16toEntities = function(str) {
    // 检测utf16字符正则
    var patt = /[\ud800-\udbff][\udc00-\udfff]/g
    return str.replace(patt, function (char) {
        var H, L, code
        if (char.length === 2) {
            H = char.charCodeAt(0) // 取出高位
            L = char.charCodeAt(1) // 取出低位
            code = (H - 0xD800) * 0x400 + 0x10000 + L - 0xDC00; // 转换算法
            return &quot;&amp;#&quot; + code + &quot;;&quot;
        } else {
            return char
        }
    })
}
</code></pre>
<h3 id="二-字符转emoji">二、字符转emoji</h3>
<pre><code class="language-js">//将编码后的八进制的emoji表情重新解码成十六进制的表情字符
const entitiesToUtf16 = function(str) {
    return str.replace(/&amp;#(\d+);/g, function (match, dec) {
        let H = Math.floor((dec - 0x10000) / 0x400) + 0xD800
        let L = Math.floor(dec - 0x10000) % 0x400 + 0xDC00
        return String.fromCharCode(H, L)
    })
}
</code></pre>
<h3 id="三-转义问题">三、转义问题</h3>
<blockquote>
<p>数据库做了安全处理，返回的字符由<code>&amp;</code>:变成了<code>&amp;amp;</code>，导致<strong>字符转emoji</strong>失败</p>
</blockquote>
<pre><code class="language-js">const changeList = {
    '&amp;': '&amp;amp;',
    '&gt;': '&amp;gt;',
    '&lt;': '&amp;lt;',
    &quot;'&quot;: '&amp;gt;',
    '&quot;': '&amp;quot;',
}
/**
* 由于安全原因, 数据库返回的一些字符是经过转义的, 需要翻译回来
* 返回翻译回来的字符串
*/
function decodeXML (origin) {
    var result = origin
    for (const key in changeList) {
        if (changeList.hasOwnProperty(key)) {
            const item = changeList[key]
            result = result.replace(new RegExp(item, 'gm'), key)
        }
    }
    return result
}
</code></pre>
<ul>
<li><strong>在<code>二、字符转emoji</code>的方法加上，字符转义方法</strong></li>
</ul>
<pre><code class="language-js">//将编码后的八进制的emoji表情重新解码成十六进制的表情字符
const entitiesToUtf16 = function(str) {
     // 数据库返回特殊字符加上了'amp;' 做一遍转义即可
    str = decodeXML(str)
    return str.replace(/&amp;#(\d+);/g, function (match, dec) {
        ...
        ...
    })
}
</code></pre>
<h3 id="四-测试">四、测试</h3>
<pre><code class="language-js">var testStr = &quot;正常的🔥橘🍊💪181848&quot;
var res = utf16toEntities(testStr)
console.log('res', res)
var decode = entitiesToUtf16(res)
console.log('decode', decode)
</code></pre>
<hr>
<p><a href="https://juejin.im/post/5bad9140e51d450e935c6d64">关于转义涉及XSS攻击</a>
如有建议和疑问可联系
QQ：1017386624
邮箱：1017386624@qq.com</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[移动端grid网格布局]]></title>
        <id>https://luojinan.github.io//post/yi-dong-duan-grid-wang-ge-bu-ju</id>
        <link href="https://luojinan.github.io//post/yi-dong-duan-grid-wang-ge-bu-ju">
        </link>
        <updated>2019-08-11T12:09:17.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>适用于<strong>移动端块状入口门板</strong>布局，多行</p>
</blockquote>
<blockquote>
<p>应该更适用于<strong>PC端</strong>，自适应浏览器，拉伸缩小，布局改变</p>
</blockquote>
<hr>
<p><ul class="markdownIt-TOC">
<li>
<ul>
<li>
<ul>
<li><a href="#%E4%B8%80-%E6%95%88%E6%9E%9C">一、效果</a></li>
<li><a href="#%E4%BA%8C-%E7%A4%BA%E4%BE%8B">二、示例</a>
<ul>
<li><a href="#1-%E7%A4%BA%E4%BE%8B1">1、示例1</a></li>
<li><a href="#2-%E7%A4%BA%E4%BE%8B2">2、示例2</a></li>
</ul>
</li>
<li><a href="#%E4%B8%89-pc%E7%AB%AF%E7%A4%BA%E4%BE%8B">三、PC端示例</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</p>
<hr>
<h3 id="一-效果">一、效果</h3>
<p><img src="https://luojinan.github.io//post-images/1565525457735.png" alt=""></p>
<h3 id="二-示例">二、示例</h3>
<h4 id="1-示例1">1、示例1</h4>
<blockquote>
<p>第一种示例只需要在<strong>父级</strong>写<code>grid</code>布局即可
<code>列2端对齐、中间列居中</code>
<code>中间行边距设值</code></p>
</blockquote>
<ul>
<li><strong>html</strong>
<img src="https://luojinan.github.io//post-images/1565525471452.png" alt=""></li>
<li><strong>外层css</strong>
<img src="https://luojinan.github.io//post-images/1565525484221.png" alt=""></li>
</ul>
<pre><code class="language-css">.parent{
    display: grid;
    grid-template: auto auto auto / auto auto auto;
    grid-row-gap: 36rpx;
    
    justify-content: space-between;
    justify-items: center;
    
    align-items: center;
}
</code></pre>
<ul>
<li><strong>内层css</strong>
<img src="https://luojinan.github.io//post-images/1565525493678.png" alt=""></li>
</ul>
<hr>
<h4 id="2-示例2">2、示例2</h4>
<p><img src="https://luojinan.github.io//post-images/1565525498059.png" alt=""></p>
<blockquote>
<p>第二种示例<strong>父级、子级</strong>都要写<code>grid</code>布局
<code>列间距设值</code>
<code>行间距设值</code>
<code>第一个子项占2列</code></p>
</blockquote>
<ul>
<li><strong>外层css</strong>
<img src="https://luojinan.github.io//post-images/1565525503568.png" alt=""></li>
</ul>
<pre><code class="language-css">parent{
    display: grid;
    grid-template: auto auto auto / auto auto auto;
    grid-row-gap: 20rpx;
    grid-column-gap: 20rpx;
}
</code></pre>
<ul>
<li><strong>内层css</strong>
<img src="https://luojinan.github.io//post-images/1565525513532.png" alt=""></li>
</ul>
<pre><code class="language-scss">child-item {
    ...
    &amp;:first-child {
        grid-column-start: 1;
        grid-column-end: 3;
    }
}
</code></pre>
<hr>
<h3 id="三-pc端示例">三、PC端示例</h3>
<blockquote>
<p>不止布局在自适应，单个<code>item</code>也在<strong>自适应</strong>(<code>flex</code>等自适应方案难做到)</p>
</blockquote>
<p><img src="https://luojinan.github.io//post-images/1565525521555.gif" alt="">
<a href="https://juejin.im/post/5d46c169e51d4562132030a0#heading-15">PC端掘金博客</a>
<a href="https://www.w3cplus.com/css3/how-the-minmax-function-works.html">minmax属性</a></p>
<hr>
<p>另外单位：<code>1fr</code>
等同于<code>flex布局</code>的<code>flex: 1;</code></p>
<hr>
<p>如有建议和疑问可联系
QQ：1017386624
邮箱：1017386624@qq.com</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[一行代码去重数组]]></title>
        <id>https://luojinan.github.io//post/yi-xing-dai-ma-qu-chong-shu-zu</id>
        <link href="https://luojinan.github.io//post/yi-xing-dai-ma-qu-chong-shu-zu">
        </link>
        <updated>2019-08-10T01:54:18.000Z</updated>
        <content type="html"><![CDATA[<h3 id="一行代码去重数组">一行代码去重数组</h3>
<p><img src="https://luojinan.github.io//post-images/1565402943271.png" alt=""></p>
<blockquote>
<p>注意<code>new Set()</code>返回的是一个set对象，而不是直接返回去重后的数组
因此，把该对象展开并放入空数组中，才能形成一个数组</p>
</blockquote>
<pre><code class="language-js">const list = [1, 1, 2, 3, 6, 45, 8, 5, 4, 6, 5]
const uniqueList = [...new Set(list)] // [1, 2, 3, 6, 45, 8, 5, 4]
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[测试文章]]></title>
        <id>https://luojinan.github.io//post/测试文章</id>
        <link href="https://luojinan.github.io//post/测试文章">
        </link>
        <updated>2019-07-10T16:20:30.000Z</updated>
        <summary type="html"><![CDATA[<p>？？？</p>
]]></summary>
        <content type="html"><![CDATA[<p>？？？</p>
<!-- more -->
<p>现在写博客的地方有：CSDN、印象笔记、Gridea。</p>
<p>1、CSDN和印象笔记的图片不互通
2、印象笔记无法自定义封面和摘要</p>
<hr>
<p>Gridea：	
1、图片上传到github有时候加载不出来...本地预览可以，线上版本不行
2、测试图片有没有可能会挂掉，永久有效就用来做印象笔记和CSDN的图床
3、除了文章的代码块，Gridea能不能上传代码文件，还是要同样要链接到github代码库
4、以后的写笔记顺序： 印象笔记--&gt;Gridea--&gt;修改--&gt;Gridea发布--&gt;CSDN发布</p>
<p><img src="https://luojinan.github.io//post-images/1562895205737.jpg" alt="测试图片"></p>
]]></content>
    </entry>
</feed>